# Provide values from config
settings="$(dirname "$(realpath "$0")")/config/pulp/settings.toml"
PULP_BASE_URL="$(sed -n -e 's/^base_url\s*=\s*"\(\S*\)"\s*$/\1/p' "$settings")"
VERIFY_SSL="$(sed -n -e 's/^verify_ssl\s*=\s*\(\S*\)\s*$/\1/p' "$settings")"

# Configure path to config
export XDG_CONFIG_HOME="$(dirname "$(realpath "$0")")/config"

# Constants used in tests
PULPCORE_VERSION=$(pulp status | jq -r '.versions | .[] | select(.component=="pulpcore").version')
PULP_FIXTURES_URL="${PULP_FIXTURES_URL:-https://fixtures.pulpproject.org}"
FILE_REMOTE_URL="${PULP_FIXTURES_URL}/file/PULP_MANIFEST"
CONTAINER_REMOTE_URL="https://registry-1.docker.io"
CONTAINER_IMAGE="hello-world"
RPM_REMOTE_URL="${PULP_FIXTURES_URL}/rpm-unsigned"
ANSIBLE_COLLECTION_REMOTE_URL="https://galaxy.ansible.com/"
ANSIBLE_ROLE_REMOTE_URL="https://galaxy.ansible.com/api/v1/roles/?namespace__name=elastic"

# Library for test helper functions

TMP="$(mktemp -d)"
trap "rm -rf $TMP" EXIT

# open fd 3 as a copy of stderr
exec 3<&2

# Expects the command to succeed
# Supresses all output, which is redirected to $OUTPUT and $ERROUTPUT
# Reports verbosely on failure
expect_succ () {
  if {
    "$@"
  } 1>"${TMP}/log.out" 2>"${TMP}/log.err"
  then
    echo "SUCCESS [$@]" >&3
    OUTPUT="$(cat "${TMP}/log.out")"
    ERROUTPUT="$(cat "${TMP}/log.err")"
  else
    echo "FAILURE [$@]" >&3
    echo "=== STDOUT ===" >&3
    cat "${TMP}/log.out" >&3
    echo "=== STDERR ===" >&3
    cat "${TMP}/log.err" >&3
    echo "==============" >&3
    false
  fi
}

# Expects the command to fail
# Supresses all output, which is redirected to $OUTPUT and $ERROUTPUT
# Reports verbosely on failure
expect_fail () {
  if {
    "$@"
  } 1>"${TMP}/log.out" 2>"${TMP}/log.err"
  then
    echo "FAILURE [! $@]" >&3
    echo "=== STDOUT ===" >&3
    cat "${TMP}/log.out" >&3
    echo "=== STDERR ===" >&3
    cat "${TMP}/log.err" >&3
    false
  else
    echo "SUCCESS [! $@]" >&3
    OUTPUT="$(cat "${TMP}/log.out")"
    ERROUTPUT="$(cat "${TMP}/log.err")"
  fi
}

# Returns true if $PULPCORE_VERSION >= $1, false otherwise
require_min_pulp () {
  if [ -z "${PULPCORE_VERSION+x}" ]
  then
    echo "Error: require_min_pulp called without \$PULPCORE_VERSION defined."
    exit 1
  fi

  if [ "$1" != "`printf "$PULPCORE_VERSION\n$1" | sort -V | head -n1`" ]
  then
    echo "Skipping $0"
    exit 3 # skip exit code
  fi
}

set -eu
